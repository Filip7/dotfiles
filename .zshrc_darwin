# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

function wd() {
    # Temporary file for capturing stderr
    local stderr_file=$(mktemp)
    # Run the command, capturing stdout normally and redirecting stderr to the temp file
    local stdout
    stdout=$(/home/filip/Workspace/workcd-go/workcd-go "$@" 2>"$stderr_file")

    # Check if there was any error output
    if [[ -s "$stderr_file" ]]; then
        local stderr_content
        stderr_content=$(cat "$stderr_file")
        echo "Error: $stderr_content" >&2
        rm -f "$stderr_file"
        return 1
    fi

    # Check if --print-config is in the arguments
    for arg in "$@"; do
        if [[ "$arg" == "--print-config" ]]; then
            # Print the stdout directly and exit
            echo "$stdout"
            rm -f "$stderr_file"
            return 0
        fi
    done

    # Clean up the temp file
    rm -f "$stderr_file"

    # Process stdout if no errors and no --print-config flag
    if [[ -n "$stdout" ]]; then
        eval "$stdout"
    fi
}

# Interactively select namespace and pod, then connect to it
function ke() {
  local ns="${1:-}"
  local pod

  # If no namespace provided, select interactively
  if [[ -z "$ns" ]]; then
    ns=$(kubectl get ns 2>/dev/null | fzf | awk '{print $1}')
    if [[ -z "$ns" ]]; then
      echo "No namespace selected." >&2
      return 1
    fi
  fi

  # Select pod
  pod=$(kubectl get po -n "$ns" 2>/dev/null | fzf | awk '{print $1}')

  if [[ -n "$pod" ]]; then
    kubectl exec -it "$pod" -n "$ns" -- /bin/bash
  else
    echo "No pod selected." >&2
  fi
}

function kl() {
  local ns="${1:-}"
  local pod

  # If no namespace provided, select interactively
  if [[ -z "$ns" ]]; then
    ns=$(kubectl get ns 2>/dev/null | fzf | awk '{print $1}')
    if [[ -z "$ns" ]]; then
      echo "No namespace selected." >&2
      return 1
    fi
  fi

  # Select pod
  pod=$(kubectl get po -n "$ns" 2>/dev/null | fzf | awk '{print $1}')

  if [[ -n "$pod" ]]; then
    kubectl logs -f "$pod" -n "$ns"
  else
    echo "No pod selected." >&2
  fi
}

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias k="kubectl"
alias v="nvim"
alias vc="nvim --clean"
alias cm="chezmoi"

eval export HOMEBREW_PREFIX="/opt/homebrew";
export HOMEBREW_CELLAR="/opt/homebrew/Cellar";
export HOMEBREW_REPOSITORY="/opt/homebrew";
fpath[1,0]="/opt/homebrew/share/zsh/site-functions";
PATH="/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/laps"; export PATH;
[ -z "${MANPATH-}" ] || export MANPATH=":${MANPATH#:}";
export INFOPATH="/opt/homebrew/share/info:${INFOPATH:-}";

export HOMEBREW_CASK_OPTS="--appdir=/Users/FMilkovic/Applications"

source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
export DOCKER_HOST="unix://${HOME}/.colima/docker.sock"


export XDG_CONFIG_HOME=/Users/FMilkovic/.config

# export NVM_DIR="$HOME/.nvm"
#   [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
#   [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
